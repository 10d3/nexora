// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Business Type Enum
enum BusinessType {
  RETAIL
  RESTAURANT
  HOTEL
  SALON
  SERVICE
  OTHER
  QUINQUAILLERIE
  PHARMACIE
  SUPERMARKET
  DEPOT
  CYBERCAFE
  BOUTIQUE
  BAKERY
  BAR
  TRANSPORTATION
  CONSTRUCTION
  AGRICULTURE
  ELECTRONICS
  EDUCATION
  EVENT_PLANNING
  TEXTILE
  SECURITY
  AUTOMOTIVE
}

// Authentication models

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(ADMIN)
  tenantId      String?
  tenant        Tenant?   @relation("ActiveTenant", fields: [tenantId], references: [id], onDelete: SetNull) // Add relation name
  tenants       Tenant[]  @relation("UserTenants")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Business relationships
  orders       Order[]
  appointments Appointment[]
  members      Member[]
  invitations  Invitation[]

  // Credit relationship
  creditAccount CreditAccount?

  // Audit tracking
  createdAuditLogs AuditLog[] @relation("CreatedBy")
  updatedAuditLogs AuditLog[] @relation("UpdatedBy")

  // Authentication relationships
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  // Subscription relationship
  subscriptions UserSubscription[]

  // pharmacy relationships
  prescriptionsPrescribed Prescription[] @relation("prescribedBy")
  prescriptionsReceived   Prescription[] @relation("patient")
  // AuditLog                AuditLog[]
  // AuditLog                AuditLog[]

  @@index([tenantId])
  @@index([email])
  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id           String   @id @default(cuid())
  userId       String
  credentialId String   @unique
  publicKey    String
  counter      Int
  transports   String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([userId])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
  READY_FOR_PICKUP // For restaurants
  DELIVERED // For restaurants
  PAID // For retail
  READY
}

enum OrderType {
  STANDARD
  TAKEOUT // For restaurants
  DELIVERY // For restaurants and retail
  RESERVATION // For hotels
  APPOINTMENT // For services
}

enum PaymentType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  ONLINE_PAYMENT
  ROOM_CHARGE // For hotels
  CREDIT // For buy now, pay later
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  CLEANING
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
  CLEANING
}

enum AppointmentStatus {
  SCHEDULED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  WAITING_LIST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
  EXTENDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  BUNDLE
}

enum CreditStatus {
  ACTIVE
  SUSPENDED
  CLOSED
  OVERDUE
}

enum TransactionType {
  PURCHASE
  PAYMENT
  ADJUSTMENT
  REFUND
  INTEREST
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  OVERDUE
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  RESTORE
  VIEW
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  PRINT
  EMAIL
  DOWNLOAD
  UPLOAD
  APPROVE
  REJECT
  CANCEL
  COMPLETE
  ASSIGN
  TRANSFER
  PAYMENT
  REFUND
  ARCHIVE
  UNARCHIVE
  LOCK
  UNLOCK
  ENABLE
  DISABLE
  REGISTER
  DEREGISTER
  SUBSCRIBE
  UNSUBSCRIBE
  VERIFY
  RESET_PASSWORD
  CHANGE_ROLE
  CHANGE_PERMISSION
  CHANGE_STATUS
  GENERATE_REPORT
  SCHEDULE
  RESCHEDULE
}

enum InventoryMovementType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
  TRANSFER
  LOSS
  INITIAL
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RETURNED
  PARTIALLY_RETURNED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
  PENDING
  TRIAL
}

enum Role {
  // Core roles (applicable to all business types)
  OWNER // Business owner with full access
  ADMIN // Administrator with near-full access
  MANAGER // General manager
  SUPERVISOR // Team supervisor
  ACCOUNTANT // Financial access
  CASHIER // Payment processing
  INVENTORY_MANAGER // Stock management
  EMPLOYEE // Basic staff member

  // Retail specific
  SALES_ASSOCIATE
  MERCHANDISER
  STORE_CLERK

  // Restaurant specific
  CHEF
  SOUS_CHEF
  WAITER
  BARTENDER
  HOST
  KITCHEN_STAFF

  // Hotel specific
  RECEPTIONIST
  CONCIERGE
  HOUSEKEEPER
  MAINTENANCE
  BELLHOP

  // Salon/Service specific
  STYLIST
  BEAUTICIAN
  THERAPIST
  TECHNICIAN

  // Healthcare/Pharmacy specific
  PHARMACIST
  PHARMACY_TECH
  DOCTOR
  NURSE

  // Supermarket specific
  BUTCHER
  BAKER
  PRODUCE_MANAGER
  DELI_WORKER

  // Education specific
  TEACHER
  INSTRUCTOR
  ADMINISTRATOR

  // Transportation/Automotive specific
  DRIVER
  MECHANIC
  DISPATCHER

  // Construction specific
  FOREMAN
  CONTRACTOR
  SITE_MANAGER

  // Cybercafe specific
  TECH_SUPPORT
  NETWORK_ADMIN

  // Event planning specific
  EVENT_COORDINATOR
  DECORATOR

  // Security specific
  SECURITY_GUARD
  SECURITY_MANAGER

  // Read-only role
  VIEWER // Can only view data, no edit permissions

  // user
  USER
}
